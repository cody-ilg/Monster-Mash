MVP, How much work will it take?
What tech will we be using?
Making the “frame” will take under a day, incorporating the drawing element (i.e HTMLCanvas) is a partial unknown. We expect this to take another half day but more research is required. Tech we will be using:
-Database, SQLite3, Knex
-multer(middleware, for storing images) 
-HTMLCanvas (pending RnD)
-Typescript
-ReactJS


Things to research?
Our main point of uncertainty is how to facilitate drawing on our app. HTMLCanvas is our primary candidate. 
We need to somehow restrict a user from seeing or drawing on half of the image, and then stitching them together to one image. 
In sprint 2 we are working out how to save our drawing as a PNG(?, multer) and export them as an image to the user's machine, we can refer to our foundation's exercise “dress the clown” for reference. 
How to save the separate canvases to then be stitched together.
Part of the game is the second player needs a reference to “join” the parts of the monster together. We need to figure out how to keep a portion of the first image visible, yet stop the second player from interacting with it.
Saving the drawing client side/keeping them safe from react. React context or useRefs, for saving every click. Preserved against page refresh, state change etc. THIS IS A BIG ONE!!
       


Git flow:
Branches:
Main. This is our production code and represents the product in its most complete state. Naming: “main”
Dev. This is our working “merge” branch. This represents our current sprint (of 3 planned) Naming: “dev”
“Feature Branch”. This represents a feature currently in development. When starting a new feature a new branch is made, old branches are kept. Naming: “S1-canvasStamps” 

Working within the same file:
Communicate to the other team you will be doing work in their file, explain what the work is and if any existing code will need to be altered. Loop the plan and ensure understanding from both teams. 
Ask yourself if working in the same file is necessary.  
If at all possible, section off the work and comment to make merging easier. 
If you need to alter anyone else's code, you must communicate this beforehand! Understanding and respect is important.

Push, Merge, Pull workflow:
When a group finishes a feature, both groups will do a push to github and create a pull request from their feature branch into dev.
Git keeper (Noah) will merge the requests, if there are conflicts everyone should mob the merge machine.
Both groups will pull into local dev from remote dev and update both their dev branch and feature branch. This ensures both groups are up to date with each other after every merge. (RESEARCH!)
git checkout “dev”, git pull origin “dev”, git checkout “feature”, git pull origin “dev”

Commits:
Commit regularly, and leave a short descriptive message. Celebrate on commit.
Make sure you git iam every commit!!  


Roles:
Responsibilities and expectations:
 
Product owner (Cody). Client stories, product decisions align with client stories, final say on product decisions.
Scrum facilitator (Rose). Structured, time-capped, planned standups. Kanban.
Git keeper (Noah). Merge authority (pull req.), git process/workflow (branches, pulls, etc. )
Vibe watcher (Iggy). Inclusion, expression, engagement and morale. 


What does a day look like? (agile)
9am Morning standup. Establish plan/goals for the day and goals before the next standup. Vibe check and coffee!
9:15 Coding time. Step aways as needed. 
11:45am Pre-lunch standup. What have you done, what is to do, any blockers? Update Kanban. Vibe check!
12pm Lunch! 
1pm Coding time. Step aways etc.
3pm if needed to bring eachother up to speed.
4:45 retro stand-down. How did you go with your goals? Day in, day out, blockers etc. Any workflow changes? Vibe check, vibe adjustments(agile)! Celebrate!
Optional working after 5.

Will we go outside?
 Weather permitting, one stand-up walk around the block. 

Documentation, what will we document?
Db diagrams, data Schema
Naming conventions
URLs for back+front end
Git process
Sprints
Wireframe
Colour theme (CSS variables)

Kanban!



Wireframe
Submitted in pre planning submission

User stories
User stories in pre planning submission

DB diagrams
In discord. As per mvp only 1 table with no joins. Stretch material involves more Db tables.



Saving drawings:
Need to save from react state changes. Hide from react!
Save to local storage periodically to preserve against refreshes etc. Local storage can pull from image data on a timer. 

Assume canvas will be rerendered at any time, how do we save the drawing?
Const canvas = useRef() for small changes on canvas. React doesn’t know shhh! Ref updates constantly. Does ref protect our drawing from react state change?

useContext() may need to be used if useRef doesn't work as we think.

Need to save to DB on completion of half of the monster. Save as PNG w multer or save as coordinates to SQLite3. 

Drawing zone:
Passing state into drawing zone to dictate pen colour etc. 



Game State:
Welcome page. Colin welcomes you, start button. 
Artist 1. Shows drawing page and half of canvas, colin gives instructions, next player button.
Artist 2. Second artist can draw. Done button appears.
Finished drawing. Add monster name and artist names. 
Save your monster. 
Go home or gallery.


  
